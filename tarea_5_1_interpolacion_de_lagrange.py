# -*- coding: utf-8 -*-
"""Tarea 5.1 Interpolacion de Lagrange.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h-NPgB3OKQh5BFF9Dp525vU9THtz8P0_
"""

#Antonio Josue Rodriguez Falcon
#Ejercicio 1: Predicción de Esfuerzos en una Viga

import numpy as np
import matplotlib.pyplot as plt

# Datos del problema
x_points = np.array([0.5, 1.0, 1.5, 2.0])
y_points = np.array([1.2, 2.3, 3.7, 5.2])

# Función de interpolación de Lagrange
def lagrange_interpolation(x, x_points, y_points):
    n = len(x_points)
    result = 0
    for i in range(n):
        term = y_points[i]
        for j in range(n):
            if i != j:
                term *= (x - x_points[j]) / (x_points[i] - x_points[j])
        result += term
    return result

# a) Determinar la deformación en x = 1.25 m
x_eval = 1.25
y_eval = lagrange_interpolation(x_eval, x_points, y_points)
print(f"a) La deformación esperada en x = {x_eval} m es: {y_eval:.2f} mm")

# b) Graficar la interpolación
x_values = np.linspace(min(x_points), max(x_points), 100)
y_values = [lagrange_interpolation(x, x_points, y_points) for x in x_values]

plt.figure(figsize=(8,5))
plt.plot(x_values, y_values, label="Interpolación de Lagrange", color="blue")
plt.scatter(x_points, y_points, color="red", label="Datos experimentales")
plt.scatter([x_eval], [y_eval], color="green", label=f"Estimación en x={x_eval}m")
plt.xlabel("Posición (m)")
plt.ylabel("Deformación (mm)")
plt.title("Interpolación de Lagrange para deformación de viga")
plt.legend()
plt.grid(True)
plt.savefig("ejercicio1_interpolacion.png")
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 2: Estimación de la Temperatura en un Motor

import numpy as np
import matplotlib.pyplot as plt

# Datos del problema
x_points = np.array([1.0, 2.5, 4.0, 5.5])
y_points = np.array([85, 78, 69, 60])

# Función de interpolación de Lagrange (la misma del ejercicio 1)
def lagrange_interpolation(x, x_points, y_points):
    n = len(x_points)
    result = 0
    for i in range(n):
        term = y_points[i]
        for j in range(n):
            if i != j:
                term *= (x - x_points[j]) / (x_points[i] - x_points[j])
        result += term
    return result

# a) Estimar temperatura a 3.0 cm
x_eval = 3.0
y_eval = lagrange_interpolation(x_eval, x_points, y_points)
print(f"a) La temperatura estimada a {x_eval} cm es: {y_eval:.2f} °C")

# b) Graficar la interpolación
x_values = np.linspace(min(x_points), max(x_points), 100)
y_values = [lagrange_interpolation(x, x_points, y_points) for x in x_values]

plt.figure(figsize=(8,5))
plt.plot(x_values, y_values, label="Interpolación de Lagrange", color="blue")
plt.scatter(x_points, y_points, color="red", label="Datos experimentales")
plt.scatter([x_eval], [y_eval], color="green", label=f"Estimación a {x_eval}cm")
plt.xlabel("Profundidad (cm)")
plt.ylabel("Temperatura (°C)")
plt.title("Interpolación de Lagrange para temperatura en motor")
plt.legend()
plt.grid(True)
plt.savefig("ejercicio2_interpolacion.png")
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 3: Predicción del Consumo de Combustible en Aeronaves

import numpy as np
import matplotlib.pyplot as plt

# Datos del problema
x_points = np.array([2.0, 4.0, 6.0, 8.0])
y_points = np.array([2500, 2300, 2150, 2050])

# Función de interpolación de Lagrange (la misma del ejercicio 1)
def lagrange_interpolation(x, x_points, y_points):
    n = len(x_points)
    result = 0
    for i in range(n):
        term = y_points[i]
        for j in range(n):
            if i != j:
                term *= (x - x_points[j]) / (x_points[i] - x_points[j])
        result += term
    return result

# a) Estimar consumo a 5 km
x_eval = 5.0
y_eval = lagrange_interpolation(x_eval, x_points, y_points)
print(f"a) El consumo estimado a {x_eval} km es: {y_eval:.2f} kg/h")

# b) Graficar la interpolación
x_values = np.linspace(min(x_points), max(x_points), 100)
y_values = [lagrange_interpolation(x, x_points, y_points) for x in x_values]

plt.figure(figsize=(8,5))
plt.plot(x_values, y_values, label="Interpolación de Lagrange", color="blue")
plt.scatter(x_points, y_points, color="red", label="Datos experimentales")
plt.scatter([x_eval], [y_eval], color="green", label=f"Estimación a {x_eval}km")
plt.xlabel("Altitud (km)")
plt.ylabel("Consumo (kg/h)")
plt.title("Interpolación de Lagrange para consumo de combustible")
plt.legend()
plt.grid(True)
plt.savefig("ejercicio3_interpolacion.png")
plt.show()